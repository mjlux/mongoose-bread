"use strict";function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(Object(b),!0).forEach(function(c){_defineProperty(a,c,b[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(Object(b)).forEach(function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))});return a}function _defineProperty(a,b,c){return(b=_toPropertyKey(b))in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function _toPropertyKey(a){var b=_toPrimitive(a,"string");return"symbol"==typeof b?b:b+""}function _toPrimitive(a,b){if("object"!=typeof a||!a)return a;var c=a[Symbol.toPrimitive];if(void 0!==c){var d=c.call(a,b||"default");if("object"!=typeof d)return d;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===b?String:Number)(a)}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_unsupportedIterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(b,c){if(b){if("string"==typeof b)return _arrayLikeToArray(b,c);var a={}.toString.call(b).slice(8,-1);return"Object"===a&&b.constructor&&(a=b.constructor.name),"Map"===a||"Set"===a?Array.from(b):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?_arrayLikeToArray(b,c):void 0}}function _iterableToArray(a){if("undefined"!=typeof Symbol&&null!=a[Symbol.iterator]||null!=a["@@iterator"])return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a))return _arrayLikeToArray(a)}function _arrayLikeToArray(b,c){(null==c||c>b.length)&&(c=b.length);for(var d=0,f=Array(c);d<c;d++)f[d]=b[d];return f}var _require=require("./RequestValidator"),checkRequest=_require.checkRequest,MongooseBreadError=require("./MongooseBreadError");function parseSelect(a){var b=a.select?Array.from(new Set(_toConsumableArray(a.select.split(",")))):[];return b.join(" ")}function parseQuery(a,b,c){return a.query?a.query:a.search?parseSearchFilter(a,b):parseQueryFilter(a,c)}function parseSearchFilter(a,b){var c=b.searchableFields;if(!Array.isArray(c)||!c.length)throw new MongooseBreadError({message:"Search is not availabe for this resource",details:"To enable search provide an \"searchableFields\" Array to the plugin registration options",statusCode:404,issuer:`MongooseBreadHelper parseSearchFilter`});if(b.enableAtlasSearch&&b.atlasSearchIndex){var d={$search:{index:b.atlasSearchIndex,text:{query:a.search,path:c}}};return JSON.stringify(d)}var e=a.search.split(" ").reduce(function(a,b){var d=c.map(function(a){return{[a]:{$regex:b,$options:"i"}}});return a.concat(d)},[]);return JSON.stringify({$or:e})}function parseQueryFilter(a,b){var c=Object.keys(b.paths),d=Object.keys(a).reduce(function(a,b){return c.includes(b)||delete a[b],a},_objectSpread({},a));return JSON.stringify(d).replace(/\b(gt|gte|lt|lte|in|eq|ne)\b/g,function(a){return`$${a}`})}function parseProjection(a,b){return a.projection?a.projection:Array.isArray(b.blacklistedFields)?b.blacklistedFields.reduce(function(a,b){return _objectSpread(_objectSpread({},a),{},{[b]:0})},{}):{}}function parseLimit(a,b){var c=b.maxPageSize,d=b.defaultPageSize;return a.limit?Math.min(parseInt(a.limit),c):d}function parseRequestParamsId(a,b,c){var d=b.paramsIdKey,e=c.issuer;return checkRequest(a).paramsIdIsValid(d,e).bodyIsNotAnArray(e),a.params[d]}function parseEditRequestBody(a,b,c){var d=b.bulkDocsKey,e=c.issuer;return checkRequest(a).hasBody(e).hasBodyProperty(d,e).bodyPropertyIsArray(d,e),a.body[d].reduce(function(a,b){return Object.assign(a,b)},{})}function parseAddRequestBody(a,b,c){var d=b.bulkDocsKey,e=c.issuer;return checkRequest(a).hasBody(e).hasBodyProperty(d,e).bodyPropertyIsArray(d,e),_toConsumableArray(a.body[d])}function parseRequestBodyIds(a,b,c){var d=b.bulkIdsKey,e=c.issuer;checkRequest(a).hasBody(e).hasBodyProperty(d,e).bodyPropertyIsArray(d,e).bodyPropertyArrayIncludesOnlyObjectIds(d,e);var f=_toConsumableArray(a.body[d]);return delete a.body[d],f}function parseRequestUserIdPath(a,b){try{var c=b.requestUserIdPath,d=c.split(".").reduce(function(a,b){if(b in a)return a[b];throw new Error(`requestUserIdPathError: could not resolve request.${c} - @key: ${b} - check softDeleteOptions.requestUserIdPath to match a path to userId:ObjectId`)},a);return d}catch(c){throw new MongooseBreadError({message:c.message,details:JSON.stringify({request:a,options:b}),issuer:`MongooseBreadHelper parseRequestUserIdPath`})}}module.exports={parseSelect,parseQuery,parseSearchFilter,parseQueryFilter,parseProjection,parseLimit,parseRequestParamsId,parseEditRequestBody,parseAddRequestBody,parseRequestBodyIds,parseRequestUserIdPath};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,